{"version":3,"sources":["img/comment.svg","img/like.svg","img/share.svg","img/comment_active.svg","img/like_active.svg","img/share_active.svg","img/upload.svg","img/confirm.svg","img/down-arrow.svg","reducers/postsReducer.js","components/Posts/Post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialStore","id","author","name","photo","nickname","content","image","date","social","likes","shares","comments","postsReducer","store","action","type","currentAuthor","find","el","Date","toDateString","connect","useState","like","setLike","isLike","setIsLike","comment","setComment","isComment","setIsComment","share","setShare","isShare","setIsShare","className","style","backgroundImage","src","confirmImg","alt","downArrowImg","onClick","commentImgActive","commentImg","shareImgActive","shareImg","likeImgActive","likeImg","uploadImg","useStyles","makeStyles","theme","button","fontSize","width","margin","display","formControl","minWidth","textField","selectEmpty","marginTop","spacing","state","posts","props","setAuthor","imageUrl","setImageUrl","postText","setPostText","classes","Send","dispatch","Button","variant","endIcon","alert","TextField","label","value","onChange","e","target","multiline","rows","FormControl","InputLabel","Select","labelId","MenuItem","map","key","Boolean","window","location","hostname","match","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.32471666.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/comment.0002e5f6.svg\";","module.exports = __webpack_public_path__ + \"static/media/like.12220a22.svg\";","module.exports = __webpack_public_path__ + \"static/media/share.444db246.svg\";","module.exports = __webpack_public_path__ + \"static/media/comment_active.e371e0b3.svg\";","module.exports = __webpack_public_path__ + \"static/media/like_active.f8fb9825.svg\";","module.exports = __webpack_public_path__ + \"static/media/share_active.abbcc3bb.svg\";","module.exports = __webpack_public_path__ + \"static/media/upload.8f047106.svg\";","module.exports = __webpack_public_path__ + \"static/media/confirm.39726703.svg\";","module.exports = __webpack_public_path__ + \"static/media/down-arrow.da333812.svg\";","const initialStore = [\r\n    {\r\n        id: 0,\r\n        author: {\r\n            name: \"Anakin Skywalker\",\r\n            photo:\r\n                \"https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg\",\r\n            nickname: \"@dart_vader\",\r\n        },\r\n        content: \"WTF? Who is Rey? Why she is Skywalker? Luke...?\",\r\n        image:\r\n            \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\",\r\n        date: \"Mon Sep 21 2020\",\r\n        social: {\r\n            likes: 165,\r\n            shares: 8,\r\n            comments: 63,\r\n        },\r\n    },\r\n    {\r\n        id: 1,\r\n        author: {\r\n            name: \"Luke Skywalker\",\r\n            photo:\r\n                \"https://s1.1zoom.ru/big0/995/Star_Wars_The_Last_Jedi_Men_Luke_Skywalker_Mark_536216_640x1024.jpg\",\r\n            nickname: \"@good_luke\",\r\n        },\r\n        content: \"Rey called herself Skywalker because she is the last JEDI\",\r\n        image:\r\n            \"https://swshadowcouncil.files.wordpress.com/2018/01/8fcc2-t-star-wars-portfolio-06-2017-longform-a.jpg\",\r\n        date: \"Tue Sep 22 2020\",\r\n        social: {\r\n            likes: 134,\r\n            shares: 6,\r\n            comments: 52,\r\n        },\r\n    },\r\n];\r\n\r\nconst postsReducer = (store = initialStore, action) => {\r\n    switch (action.type) {\r\n        case \"POST_CREATE\": {\r\n            const currentAuthor = store.find(\r\n                (el) => el.author.name === action.author\r\n            );\r\n            return [\r\n                ...store,\r\n                {\r\n                    id: action.id,\r\n                    author: {\r\n                        name: currentAuthor.author.name,\r\n                        photo: currentAuthor.author.photo,\r\n                        nickname: currentAuthor.author.nickname,\r\n                    },\r\n                    content: action.content,\r\n                    image: action.image,\r\n                    date: new Date().toDateString(),\r\n                    social: {\r\n                        likes: 0,\r\n                        shares: 0,\r\n                        comments: 0,\r\n                    },\r\n                },\r\n            ];\r\n        }\r\n        default:\r\n            return initialStore;\r\n    }\r\n};\r\n\r\nexport default postsReducer;\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport commentImg from \"../../img/comment.svg\";\r\nimport likeImg from \"../../img/like.svg\";\r\nimport shareImg from \"../../img/share.svg\";\r\nimport commentImgActive from \"../../img/comment_active.svg\";\r\nimport likeImgActive from \"../../img/like_active.svg\";\r\nimport shareImgActive from \"../../img/share_active.svg\";\r\nimport uploadImg from \"../../img/upload.svg\";\r\nimport confirmImg from \"../../img/confirm.svg\";\r\nimport downArrowImg from \"../../img/down-arrow.svg\";\r\n\r\nconst Post = ({ author, date, content, image, social }) => {\r\n    const { likes, shares, comments } = social;\r\n    const [like, setLike] = useState(likes);\r\n    const [isLike, setIsLike] = useState(false);\r\n    const [comment, setComment] = useState(comments);\r\n    const [isComment, setIsComment] = useState(false);\r\n    const [share, setShare] = useState(shares);\r\n    const [isShare, setIsShare] = useState(false);\r\n\r\n    const likeToggler = () => {\r\n        if (isLike) {\r\n            setLike(() => like - 1);\r\n            setIsLike(!isLike);\r\n        } else {\r\n            setLike(() => like + 1);\r\n            setIsLike(!isLike);\r\n        }\r\n    };\r\n\r\n    const commentToggler = () => {\r\n        if (isComment) {\r\n            setComment(() => comment - 1);\r\n            setIsComment(!isComment);\r\n        } else {\r\n            setComment(() => comment + 1);\r\n            setIsComment(!isComment);\r\n        }\r\n    };\r\n\r\n    const shareToggler = () => {\r\n        if (isShare) {\r\n            setShare(() => share - 1);\r\n            setIsShare(!isShare);\r\n        } else {\r\n            setShare(() => share + 1);\r\n            setIsShare(!isShare);\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"post-wrapper\">\r\n            <div\r\n                className=\"post_avatar\"\r\n                style={{ backgroundImage: `url(${author.photo})` }}\r\n            ></div>\r\n            <div className=\"content-column\">\r\n                <div className=\"name-row\">\r\n                    <div className=\"name\">{author.name}</div>\r\n                    <img src={confirmImg} alt=\"Confirmed\" className=\"confirm\" />\r\n                    <div className=\"nickname\">{author.nickname}</div>\r\n                    <div className=\"dot\"></div>\r\n                    <div className=\"date\">{date}</div>\r\n                    <img\r\n                        className=\"more-arrow\"\r\n                        src={downArrowImg}\r\n                        alt=\"Show more\"\r\n                    />\r\n                </div>\r\n                <div className=\"content\">{content}</div>\r\n                <div className=\"content-img\">\r\n                    <img src={image} alt=\"Content\" />\r\n                </div>\r\n                <div className=\"social-btns\">\r\n                    <div onClick={commentToggler}>\r\n                        <img\r\n                            src={isComment ? commentImgActive : commentImg}\r\n                            alt=\"Comment\"\r\n                        />\r\n                        <span>{comment}</span>\r\n                    </div>\r\n                    <div onClick={shareToggler}>\r\n                        <img\r\n                            src={isShare ? shareImgActive : shareImg}\r\n                            alt=\"Share\"\r\n                        />\r\n                        <span>{share}</span>\r\n                    </div>\r\n                    <div onClick={likeToggler}>\r\n                        <img\r\n                            src={isLike ? likeImgActive : likeImg}\r\n                            alt=\"Like\"\r\n                        />\r\n                        <span>{like}</span>\r\n                    </div>\r\n                    <div>\r\n                        <img src={uploadImg} alt=\"Upload\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect(null, null)(Post);\r\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport TextField from \"@material-ui/core/TextField\";\n\nimport Post from \"./components/Posts/Post\";\nimport \"./App.css\";\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        fontSize: \"20px\",\n        width: \"900px\",\n        margin: \"20px auto\",\n        display: \"flex\",\n    },\n    formControl: {\n        margin: \"20px auto\",\n        minWidth: 120,\n        width: 900,\n        display: \"flex\",\n    },\n    textField: {\n        margin: \"20px auto\",\n        minWidth: 120,\n        width: 900,\n        display: \"flex\",\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\nlet id = 3;\n\nconst App = (props) => {\n    const [author, setAuthor] = useState(\"\");\n    const [imageUrl, setImageUrl] = useState(\"\");\n    const [postText, setPostText] = useState(\"\");\n\n    const classes = useStyles();\n\n    const postCreate = () => {\n        if (author && imageUrl && postText) {\n            setAuthor(\"\");\n            setImageUrl(\"\");\n            setPostText(\"\");\n            id++;\n        } else alert(\"Please enter post info\");\n    };\n\n    const sendComponent = ({ dispatch }) => {\n        return (\n            <Button\n                variant=\"contained\"\n                className={classes.button}\n                endIcon={<SendIcon />}\n                onClick={() => {\n                    if (author && imageUrl && postText) {\n                        postCreate();\n                        dispatch({\n                            type: \"POST_CREATE\",\n                            id: id,\n                            author: author,\n                            content: postText,\n                            image: imageUrl,\n                        });\n                    } else alert(\"Please enter post info\");\n                }}\n            >\n                Send\n            </Button>\n        );\n    };\n\n    const Send = connect(null, null)(sendComponent);\n\n    return (\n        <div className=\"App\">\n            <TextField\n                id=\"outlined-helperText\"\n                label=\"Post image URL\"\n                value={imageUrl}\n                onChange={(e) => setImageUrl(e.target.value)}\n                variant=\"outlined\"\n                className={classes.textField}\n            />\n            <TextField\n                id=\"outlined-multiline-flexible\"\n                label=\"Post text\"\n                multiline\n                rows={3}\n                value={postText}\n                onChange={(e) => setPostText(e.target.value)}\n                variant=\"outlined\"\n                className={classes.textField}\n            />\n            <FormControl variant=\"outlined\" className={classes.formControl}>\n                <InputLabel id=\"demo-simple-select-outlined-label\">\n                    Select user\n                </InputLabel>\n                <Select\n                    labelId=\"demo-simple-select-outlined-label\"\n                    id=\"demo-simple-select-outlined\"\n                    value={author}\n                    onChange={(e) => setAuthor(e.target.value)}\n                    label=\"Select user\"\n                >\n                    <MenuItem value=\"Anakin Skywalker\">\n                        Anakin Skywalker\n                    </MenuItem>\n                    <MenuItem value=\"Luke Skywalker\">Luke Skywalker</MenuItem>\n                </Select>\n            </FormControl>\n            <Send />\n            {props.posts.map(({ author, date, content, image, social, id }) => {\n                return (\n                    <Post\n                        author={author}\n                        date={date}\n                        content={content}\n                        image={image}\n                        social={social}\n                        key={id}\n                    />\n                );\n            })}\n        </div>\n    );\n};\n\nconst mapState = (state) => {\n    return {\n        posts: state,\n    };\n};\n\nexport default connect(mapState, null)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport postsReducer from \"./reducers/postsReducer\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = createStore(postsReducer);\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}